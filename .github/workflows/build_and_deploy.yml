name: Build Docker container and deploy app to AWS

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: alex-ic
  REGION: ap-southeast-1

jobs:
  shared_variables:
    name: Set env variables based on current branch
    runs-on: ubuntu-latest

    outputs:
      env_name: ${{ steps.populate-outputs.outputs.env_name }}
      container_name: ${{ steps.populate-outputs.outputs.container_name }}
      ecs_cluster: ${{ steps.populate-outputs.outputs.ecs_cluster }}
      ecs_service: ${{ steps.populate-outputs.outputs.ecs_service }}
      ecs_task_definition: ${{ steps.populate-outputs.outputs.ecs_task_definition }}

    steps:
      - name: Set env BRANCH
        run: echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV

      - name: Set current env variable
        run: |
          if [[ $BRANCH == 'main' ]]; then
              echo "CURRENT_ENV=production" >> "$GITHUB_ENV"
          else
              echo "CURRENT_ENV=staging" >> "$GITHUB_ENV"
          fi

      - name: Populate outputs
        id: populate-outputs
        run: |
            echo "env_name=${{ env.CURRENT_ENV }}" >> $GITHUB_OUTPUT
            echo "container_name=alex-ic-${{ env.CURRENT_ENV }}" >> $GITHUB_OUTPUT
            echo "ecs_cluster=alex-ic-${{ env.CURRENT_ENV }}-ecs-cluster" >> $GITHUB_OUTPUT
            echo "ecs_service=alex-ic-${{ env.CURRENT_ENV }}-ecs-service" >> $GITHUB_OUTPUT
            echo "ecs_task_definition=alex-ic-${{ env.CURRENT_ENV }}-service" >> "$GITHUB_OUTPUT"

  build_image:
    needs: shared_variables
    name: Build the Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Debug
        run: |
          echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}"
          echo "REGION=${{ env.REGION }}"
          echo "env_name=${{ needs.shared_variables.outputs.env_name }}"
          echo "container_name=${{ needs.shared_variables.outputs.container_name }}"
          echo "ecs_cluster=${{ needs.shared_variables.outputs.ecs_cluster }}"
          echo "ecs_service=${{ needs.shared_variables.outputs.ecs_service }}"
          echo "ecs_task_definition=${{ needs.shared_variables.outputs.ecs_task_definition }}"
      
      - name: ENV variables
        uses: FranzDiebold/github-env-vars-action@v2.7.0

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
          mask-aws-account-id: 'no'

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.3

      - name: Build, tag, and push image to AWS ECR
        id: build-image
        env:
          SHARED_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $SHARED_ECR_REGISTRY/$ECR_REPOSITORY:$CI_REF_NAME_SLUG-$CI_SHA_SHORT -t $SHARED_ECR_REGISTRY/$ECR_REPOSITORY:${{ needs.shared_variables.outputs.env_name }} .
          docker push -a $SHARED_ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$SHARED_ECR_REGISTRY/$ECR_REPOSITORY:$CI_REF_NAME_SLUG-$CI_SHA_SHORT" >> $GITHUB_OUTPUT
  
  deploy:
    needs: [build_image, shared_variables]
    name: Deploy the built image
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.3

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ needs.shared_variables.outputs.ecs_task_definition }} \
          --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
        with:
          task-definition: task-definition.json
          container-name: ${{ needs.shared_variables.outputs.container_name }}
          image: ${{ needs.build_image.outputs.image }}

      - name: Trigger ECS Deployment
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ needs.shared_variables.outputs.ecs_service }}
          cluster: ${{ needs.shared_variables.outputs.ecs_cluster }}
          wait-for-service-stability: true
