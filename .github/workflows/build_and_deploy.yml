name: Build Docker container and deploy app to AWS

on:
  push:
    branches:
      # - develop
      # - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: alex-ic
  REGION: ap-southeast-1

jobs:
  build_and_deploy:
    name: Build the Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Set current branch name to variable
        run: echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV

      - name: Set current env name based on current branch name
        run: |
          if [[ $BRANCH == 'main' ]]; then
              echo "CURRENT_ENV=production" >> "$GITHUB_ENV"
          else
              echo "CURRENT_ENV=staging" >> "$GITHUB_ENV"
          fi

      - name: Populate based on current end and shared between jobs variables
        id: populate-outputs
        run: |
            echo "CONTAINER_NAME=alex-ic-${{ env.CURRENT_ENV }}" >> $GITHUB_ENV
            echo "ECS_CLUSTER=alex-ic-${{ env.CURRENT_ENV }}-ecs-cluster" >> $GITHUB_ENV
            echo "ECS_SERVICE=alex-ic-${{ env.CURRENT_ENV }}-ecs-service" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION=alex-ic-${{ env.CURRENT_ENV }}-service" >> "$GITHUB_ENV"

      - name: Expose useful environment variables
        uses: FranzDiebold/github-env-vars-action@v2.7.0

      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.3

      - name: Build, tag, and push image to AWS ECR
        env:
          SHARED_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $SHARED_ECR_REGISTRY/$ECR_REPOSITORY:$CI_REF_NAME_SLUG-$CI_SHA_SHORT \
          -t $SHARED_ECR_REGISTRY/$ECR_REPOSITORY:${{ env.CURRENT_ENV }} .
          docker push -a $SHARED_ECR_REGISTRY/$ECR_REPOSITORY

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.CI_REF_NAME_SLUG }}-${{ env.CI_SHA_SHORT }}

      - name: Trigger ECS Deployment
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
